# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class NotANumberError(Exception):
    def __init__(self, val):
        self.val = val


my_list = []

while True:
    input_i = input('Enter an integer: ')

    if input_i == "stop":
        print(f'Final list: {my_list}')
        print('Program was stopped')
        break

    try:
        if input_i.isdigit():
            my_list.append(int(input_i))
        else:
            raise NotANumberError(input_i)
    except NotANumberError as inst:
        print(f'{inst.val} is not a number')
    finally:
        print(f'Current list: {my_list}')
        print('Enter "stop" if you want to exit programme\n')
